import argparse


class ConversionNotPossible(Exception):
    pass


def convert(fromUnit, toUnit, value):
    """
    Converts between Fahrenheit, Celsius and Kelvin, and
    Converts between Miles, Yards and Meters.
    :param fromUnit:
    :param toUnit:
    :param value:
    :return:
    """

    units = {
        'CELSIUS': {
            'KELVIN': lambda v: v + 273.15,
            'FAHRENHEIT': lambda v: (9 / 5 * v) + 32
        },
        'FAHRENHEIT': {
            'CELSIUS': lambda v: (v - 32) * 5 / 9,
            'KELVIN': lambda v: (v + 459.67) * 5 / 9
        },
        'KELVIN': {
            'CELSIUS': lambda v: v - 273.15,
            'FAHRENHEIT': lambda v: (v * 9 / 5) - 459.67
        },
        'YARDS': {
            'METERS': lambda v: v * 0.9144,
            'MILES': lambda v: v / 1760
        },
        'METERS': {
            'YARDS': lambda v: v * 1.093613,
            'MILES': lambda v: v / 1609.344
        },
        'MILES': {
            'YARDS': lambda v: v * 1760,
            'METERS': lambda v: v * 1609.344
        }
    }

    if fromUnit.upper() not in units or toUnit.upper() not in units[fromUnit.upper()]:
        raise ConversionNotPossible(f"Conversion from {fromUnit.upper()} to {toUnit.upper()} is not possible.")

    if fromUnit.upper() == toUnit.upper():
        return value

    convertedValue = units[fromUnit.upper()][toUnit.upper()](value)

    return convertedValue


def main():
    parser = argparse.ArgumentParser(description='Convert temperature and distance units')
    parser.add_argument('fromUnit', type=str, help='Unit to convert from')
    parser.add_argument('toUnit', type=str, help='Unit to convert to')
    parser.add_argument('value', type=float, help='Temperature or distance value to convert')
    args = parser.parse_args()

    result = convert(args.fromUnit, args.toUnit, args.value)

    print(f"{args.value} {args.fromUnit} is equal to {result} {args.toUnit}")


if __name__ == '__main__':
    main()

